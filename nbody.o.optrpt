Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: main(int, const char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, const char **)) [1] nbody.cc(71,45)
  -> INLINE: (74,38) atoi(const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (111,5) MoveParticles(int, ParticleSet *, float)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody.cc(108,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

    Report from: Code generation optimizations [cg]

nbody.cc(71,45):remark #34051: REGISTER ALLOCATION : [main] nbody.cc:71

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   33[ rax rdx rcx rsi rdi r8 r12-r15 zmm0-zmm8 zmm16-zmm28 k1]
        
    Routine temporaries
        Total         :     202
            Global    :      54
            Local     :     148
        Regenerable   :      56
        Spilled       :      16
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       2 [0.00e+00 ~ 0.0%]
        Spills        :     128 bytes*
            Reads     :      23 [8.20e+01 ~ 12.3%]
            Writes    :      18 [3.20e+01 ~ 4.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MoveParticles(int, ParticleSet *, float)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MoveParticles(int, ParticleSet *, float)) [2] nbody.cc(24,87)


    Report from: OpenMP optimizations [openmp]

nbody.cc(25:1-25:1):OMP:_Z13MoveParticlesiP11ParticleSetf:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody.cc(64,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between particle->x[i] (65:5) and particle->z[i] (67:5)
LOOP END

LOOP BEGIN at nbody.cc(27,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nbody.cc(34,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25439: unrolled with remainder by 16  

      LOOP BEGIN at nbody.cc(35,2)
         remark #15300: LOOP WAS VECTORIZED
      LOOP END
   LOOP END

   LOOP BEGIN at nbody.cc(53,1)
   <Multiversioned v1>
      remark #25228: Loop multiversioned for Data Dependence
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at nbody.cc(34,5)
   <Remainder>
   LOOP END

   LOOP BEGIN at nbody.cc(53,1)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      remark #25436: completely unrolled by 16  
   LOOP END

   LOOP BEGIN at nbody.cc(31,18)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at nbody.cc(27,3)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

nbody.cc(24,87):remark #34051: REGISTER ALLOCATION : [_Z13MoveParticlesiP11ParticleSetf] nbody.cc:24

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   53[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm31 k1-k7]
        
    Routine temporaries
        Total         :     578
            Global    :      63
            Local     :     515
        Regenerable   :      50
        Spilled       :      10
        
    Routine stack
        Variables     :     228 bytes*
            Reads     :      62 [3.72e+02 ~ 5.0%]
            Writes    :      16 [1.68e+02 ~ 2.2%]
        Spills        :     168 bytes*
            Reads     :      20 [2.31e+01 ~ 0.3%]
            Writes    :      19 [1.20e+01 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
